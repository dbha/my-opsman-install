resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource

resources:
#- name: platform-automation
#  type: pivnet
#  source:
#    product_slug: platform-automation
#    api_token: ((pivnet-refresh-token))

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.platform_automation))
    regexp: platform-automation-tasks-(.*).zip
    skip_ssl_verification: true

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    region_name: ((s3.region_name))
    bucket: ((s3.buckets.platform_automation))
    regexp: platform-automation-image-(.*).tgz
    skip_ssl_verification: true


# configurations
- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: master

- name: variable
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.platform_automation_pipelines.uri))
    branch: master

  ## semver-config will emit semver-config.yml to be use as a input of download-product.yml
- name: product-version-git-opsman
  type: semver-config
  source:
    driver: git
    uri: ((git.platform_automation_pipelines.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: foundations/((foundation))/products/versions.yml
    ## key to identify product section in 'version.yml'
    config_path: products.opsman
    ## to track version by semver-config
    version_path: products.opsman.product-version
    ## care only patch version chage.
    version_pattern: "m.n.p"

#- name: opsman-product
#  type: s3
#  source:
#    endpoint: ((s3.endpoint))
#    access_key_id: ((s3.access_key_id))
#    bucket: ((s3.buckets.pivnet_products))
#    region_name: ((s3.region_name))
#    secret_access_key: ((s3.secret_access_key))
#    regexp: "ops-manager-vsphere-*(.*).*"
#    skip_ssl_verification: true

# reusable stuff
credhub_interpolate: &credhub_interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATHS: foundations/((foundation))/opsman foundations/((foundation))/vars
    SKIP_MISSING: false

#- name: config
#  type: git
#  source:
#    uri: ((pipeline-repo))
#    private_key: ((plat-auto-pipes-deploy-key.private_key))
#    branch: master

credhub_interpolate: &credhub_interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: foundations/((foundation))/pipeline-vars
#    INTERPOLATION_PATHS: foundations/((foundation))/pipeline-vars foundations/((foundation))/opsman foundations/((foundation))/vars foundations/((foundation))/products
    SKIP_MISSING: false

# for *.yaml, *.yml ( ie. semver-version.yaml)
credhub_interpolate-product-version-git-opsnam: &credhub_interpolate-product-version-git-opsman
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: product-version-git-opsman
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/main
    INTERPOLATION_PATHS: '.'
    SKIP_MISSING: false
  output_mapping:
    interpolated-files: product-version-git-opsman

prepare_tasks_with_secrets: &prepare_tasks_with_secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/foundations/((foundation))/download-products
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks

jobs:
  - name: upload-and-stage-product
    serial: true
    plan:
      - in_parallel:
          - get: product-version-git-opsman
            trigger: false
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable

      - task: prepare_tasks_with_secrets
        <<: *prepare_tasks_with_secrets

      - task: credhub_interpolate
        <<: *credhub_interpolate

      - task: credhub_interpolate-product-version-git-opsman
        <<: *credhub_interpolate-product-version-git-opsman

      - task: download-opsman-image
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        input_mapping: {config: configuration }
        params:
          CONFIG_FILE: foundations/((foundation))/download-products/opsman.yml
        output_mapping:
          downloaded-product: opsman-image

#      - put: opsman-product
#        params:
#          file: downloaded-product/*

#      ## ova file.
#      - task: download-product-from-s3
#        image: platform-automation-image
##        file: platform-automation-tasks/tasks/download-product-s3.yml
#        file: platform-automation-tasks/tasks/download-product-s3.yml
#        input_mapping:
#          ## semver-config output semver-config.yml to be use as a input of download-product.yml
#          ## semver-config.yaml is output of 'product-version-git-opsnam' task.
#          ## will find a folder name of '[pivnet-product-slug, product-version]' in s3 bucket.
#          ## will find a file name 'pivnet-product-slug, product-version, pivnet-file-glob' under the folder.
#          ## stemcell slug will come from meta in product file.
#          ## ex) https://s3/pivnet-products/[opsmanager,2.6.3]/ops-manager-vsphere-2.6.3-build.163.ova
#          config: product-version-git-opsman  ## will provide additional params for semver-config.yaml
#          vars: interpolated-files
#        params:
#          CONFIG_FILE: semver-config.yaml
#          # VARS_FILES: vars/((foundation))/vars/global.yml

      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
#          image: opsman-image # moving big files is slow. this file doesn't move. and will use 'downloaded-files' as it is
          state: configuration # have to provide empty state.yml file. 'interpolated-files' doesn't have state.yml file.
          config: configuration
#          config: interpolated-files # for products/ops-manager.yml
#          vars: interpolated-files
        params:
          OPSMAN_CONFIG_FILE: foundations/((foundation))/products/opsman.yml
          #VARS_FILES: vars/((foundation))/vars/ops-manager-vars.yml
          STATE_FILE: foundations/((foundation))/state/state.yml

        ensure: &put-state
          do:
            - put: state
              params:
                file: generated-state/state-((foundation)).yml

#       on_success: &make-state-commit
#         do:
#           - task: make-commit
#             image: platform-automation-image
#             file: platform-automation-tasks/tasks/make-git-commit.yml
#             input_mapping:
#               repository: configuration
#               file-source: generated-state
#             output_mapping:
#               repository-commit: configuration-commit
#             params:
#               FILE_SOURCE_PATH: state.yml
#               FILE_DESTINATION_PATH: ((foundation))/state/state.yml
#               GIT_AUTHOR_EMAIL: ((git.user.email))
#               GIT_AUTHOR_NAME: ((git.user.username))
#               COMMIT_MESSAGE: 'Update state file by create-new-opsman-vm task'
#           - put: configuration
#             params:
#               repository: configuration-commit
#               merge: true