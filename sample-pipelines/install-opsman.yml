resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
resources:
- name: platform-automation
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))

# configurations
- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    branch: master

- name: variable
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.variable.uri))
    branch: master

## semver-config will emit  semver-config.yml to be use as a input of download-product.yml
- name: product-version-git
  type: semver-config
  source:
    driver: git
    uri: ((git.configuration.uri))
    branch: master
    private_key: ((git.private_key))
    config_file: ((foundation))/products/versions.yml
    ## key to identify product section in 'version'
    config_path: products.((product-name))
    ## to track version by semver-config
    version_path: products.((product-name)).product-version
    ## care only patch version chage.
    version_pattern: "m.n.*"

prepare_tasks_with_secrets: &prepare_tasks_with_secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare_tasks_with_secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
  output_mapping:
    tasks: platform-automation-tasks
  params:
    CONFIG_PATHS: config/((foundation))/opsman
    VARS_PATHS: config/((foundation))/vars


#credhub_interpolate: &credhub_interpolate
#  image: platform-automation-image
#  file: platform-automation-tasks/tasks/credhub_interpolate.yml
#  input_mapping:
#    files: configuration
#  params:
#    CREDHUB_SERVER: ((credhub.server))
#    CREDHUB_CA_CERT: ((credhub.ca_cert))
#    CREDHUB_CLIENT: ((credhub.client))
#    CREDHUB_SECRET: ((credhub.secret))
#    PREFIX: /concourse/((foundation))
#    INTERPOLATION_PATHS: ((foundation))/opsman ((foundation))/vars
#    SKIP_MISSING: false

#- name: config
#  type: git
#  source:
#    uri: ((pipeline-repo))
#    private_key: ((plat-auto-pipes-deploy-key.private_key))
#    branch: master


jobs:
  - name: upload-and-stage-product
    serial: true
    plan:
      - in_parallel:
          - get: product-version-git
            trigger: false
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
