resource_types:
  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final

resources:
  - name: platform-automation-pivnet
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: platform-automation
      product_version: 4\.(.*)
      sort_by: semver

  - name: pipelines
    type: git
    source:
      private_key: ((git.private_key))
      uri: ((git.platform_automation_pipelines.uri))
      branch: ((git.platform_automation_configs.branch))

  - name: platform-automation-tasks
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.platform_automation))
      regexp: platform-automation-tasks-(.*).zip
      skip_ssl_verification: true

  - name: platform-automation-image
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      secret_access_key: ((s3.secret_access_key))
      region_name: ((s3.region_name))
      bucket: ((s3.buckets.platform_automation))
      regexp: platform-automation-image-(.*).tgz
      skip_ssl_verification: true

  - name: configuration
    type: git
    source:
      private_key: ((git.private_key))
      uri: ((git.platform_automation_configs.uri))
      branch: ((git.platform_automation_configs.branch))

  - name: opsman-product
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: "ops-manager-vsphere-*(.*).*"
      skip_ssl_verification: true

  - name: stemcell-repo
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: bosh-stemcell-(.*)-*.*\.tgz
      skip_ssl_verification: true

  - name: healthwatch-product
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: p-healthwatch-(.*).pivotal
      skip_ssl_verification: true

  - name: pks-product
    type: s3
    source:
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key_id))
      bucket: ((s3.buckets.pivnet_products))
      region_name: ((s3.region_name))
      secret_access_key: ((s3.secret_access_key))
      regexp: pivotal-container-service-*(.*).pivotal
      skip_ssl_verification: true

prepare_tasks_with_secrets: &prepare_tasks_with_secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/foundations/((foundation))/download-products
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks

jobs:

  - name: fetch-platform-automation
    serial: true
    serial_groups: [serial-jobs]
    plan:
      - get: platform-automation-pivnet
      - put: platform-automation-tasks
        params:
          file: platform-automation-pivnet/platform-automation-tasks-*.zip
      - put: platform-automation-image
        params:
          file: platform-automation-pivnet/platform-automation-image-*.tgz

  - name: fetch-opsman
    serial: true
    serial_groups: [serial-jobs]
    plan:
      - in_parallel:
          - get: pipelines
          - get: platform-automation-image
            params: { unpack: true }
          - get: platform-automation-tasks
            params: { unpack: true }
          - get: configuration

      - task: prepare_tasks_with_secrets
        <<: *prepare_tasks_with_secrets

      - task: download-opsman-image
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        input_mapping: {config: configuration }
        params:
          CONFIG_FILE: foundations/((foundation))/download-products/opsman.yml
      - put: opsman-product
        params:
          file: downloaded-product/*